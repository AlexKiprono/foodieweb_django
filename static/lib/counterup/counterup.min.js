/*!
 * jquery.counterup.js 2.1.0
 *
 * Copyright 2013, Benjamin Intal http://gambit.ph @bfintal
 * Released under the GPL v2 License
 *
 * Amended by Jeremy Paris, Ciro Mattia Gonano and others
 *
 * Date: Feb 24, 2017
 */
(function(Ksh) {
    "use strict";
    Ksh.fn.counterUp = function(options) {
        var settings = Ksh.extend({ time: 400, delay: 10, offset: 100, beginAt: 0, formatter: false, context: "window", callback: function() {} }, options),
            s;
        return this.each(function() {
            var Kshthis = Ksh(this),
                counter = { time: Ksh(this).data("counterup-time") || settings.time, delay: Ksh(this).data("counterup-delay") || settings.delay, offset: Ksh(this).data("counterup-offset") || settings.offset, beginAt: Ksh(this).data("counterup-beginat") || settings.beginAt, context: Ksh(this).data("counterup-context") || settings.context };
            var counterUpper = function() {
                var nums = [];
                var divisions = counter.time / counter.delay;
                var num = Ksh(this).attr("data-num") ? Ksh(this).attr("data-num") : Kshthis.text();
                var isComma = /[0-9]+,[0-9]+/.test(num);
                num = num.replace(/,/g, "");
                var decimalPlaces = (num.split(".")[1] || []).length;
                if (counter.beginAt > num) counter.beginAt = num;
                var isTime = /[0-9]+:[0-9]+:[0-9]+/.test(num);
                if (isTime) {
                    var times = num.split(":"),
                        m = 1;
                    s = 0;
                    while (times.length > 0) {
                        s += m * parseInt(times.pop(), 10);
                        m *= 60
                    }
                }
                for (var i = divisions; i >= counter.beginAt / num * divisions; i--) {
                    var newNum = parseFloat(num / divisions * i).toFixed(decimalPlaces);
                    if (isTime) {
                        newNum = parseInt(s / divisions * i);
                        var hours = parseInt(newNum / 3600) % 24;
                        var minutes = parseInt(newNum / 60) % 60;
                        var seconds = parseInt(newNum % 60, 10);
                        newNum = (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds)
                    }
                    if (isComma) { while (/(\d+)(\d{3})/.test(newNum.toString())) { newNum = newNum.toString().replace(/(\d+)(\d{3})/, "Ksh1" + "," + "Ksh2") } }
                    if (settings.formatter) { newNum = settings.formatter.call(this, newNum) }
                    nums.unshift(newNum)
                }
                Kshthis.data("counterup-nums", nums);
                Kshthis.text(counter.beginAt);
                var f = function() {
                    if (!Kshthis.data("counterup-nums")) { settings.callback.call(this); return }
                    Kshthis.html(Kshthis.data("counterup-nums").shift());
                    if (Kshthis.data("counterup-nums").length) { setTimeout(Kshthis.data("counterup-func"), counter.delay) } else {
                        Kshthis.data("counterup-nums", null);
                        Kshthis.data("counterup-func", null);
                        settings.callback.call(this)
                    }
                };
                Kshthis.data("counterup-func", f);
                setTimeout(Kshthis.data("counterup-func"), counter.delay)
            };
            Kshthis.waypoint(function(direction) {
                counterUpper();
                this.destroy()
            }, { offset: counter.offset + "%", context: counter.context })
        })
    }
})(jQuery);